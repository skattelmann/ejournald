@title Ejournald: An Interface to systemd's journald
@copyright Travelping GmbH <info@travelping.com>

@doc
== Overview ==

Ejournald is an Erlang interface for systemd's <a href="http://www.freedesktop.org/software/systemd/man/systemd-journald.service.html"><tt>journald</tt></a>. It provides advanced write and read support.

=== Using the I/O server ===
By default an I/O-server named <em>ejournald_io_server</em> is started together with ejournald. The log level (by default <em>info</em>) and other options are fixed for one I/O-server. Thus if you need other options (e.g. another log level) you need to start your own one. Note that the 'name' option (a string) is mandatory and you have to deliver a unique name for every server. This name will appear as a prefix in the journal.

=== Using the high level query API ===
Note that using the API requires you to start an 'ejournald_reader' on the journal of your interest. By default a reader is started on the standard journal. The API queries this reader for retrieving logs.

The high-level API for reading logs consists of the two function <em>get_logs()</em> and <em>log_notify()</em>. The first one will enable you to retrieve logs based on time-frames and other options. The latter one is intended to deliver new logs as they appear in the journal. Logs are always delivered in the form

```
    {Timestamp, LogLevel, LogData}
'''

where <em>Timestamp</em> is of type <a href="http://www.erlang.org/doc/man/calendar.html#type-datetime1970"><tt>calendar:datetime1970()</tt></a>, <em>LogLevel</em> is one of the eight journald log levels and <em>LogData</em> is a string or a list of strings. For example 

```
    LastLogs = ejournald:get_logs([{at_most, 10}, {message, true}]),
    {ok, NotifyPid} = ejournald:log_notify(self(), [{message, true}]),
    flush(). % some new logs might appear here 
'''

is roughly equivalent to <em>'journalctl -f'</em> giving you the last 10 logs in message-only format (just one string per log) and following the journal if new logs appear. Leaving the 'message'-option would give you whole logs (a list of strings per log). The 'Options' parameter is always intended to filter the choice of logs. Just <em>ejournald:get_logs([ ])</em> would reproduce the whole journal. To restrict the time-frame for <em>get_logs()</em> you can use the options 'since' and 'until'. The order of logs is always destined by the 'direction'-option (by default 'descending' - from newest to oldest). Another example:

```
    Logs = ejournald:get_logs([{direction, ascending}, {since, {{2013,12,31},{12,0,0}} }]).
'''

This gives you full logs in the order 'oldest to newest' since lunchtime of last silvester. Note that you must use UTC-time. If possible filtering should be done by ejournald since the used C-API in the background is much faster at handling this. You can use as many different <em>log_notify()</em>'s as you want at the same time. Different filters will be handled properly. A process handling new logs has the following layout:

```
    loop() ->
        receive 
            {'EXIT', FromPid, Reason} ->
                % end your process;
                % ejournald automatically links a worker process to your pid.
                % Thus if you end your process it will also end this worker.
            {Timestamp, LogLevel, LogData} ->
                % do something here
                loop();
            journal_invalidate ->
                % maybe a new journal file was appended, refresh your monitors!
                loop()
        end.
'''

You can also provide a function for working on the logs. Both <em>get_logs()</em> and <em>log_notify()</em> support regular expressions (see 'regex' option) according to the <a href="http://www.erlang.org/doc/man/re.html"><tt>erlang re module</tt></a>. It is possible to search only through the 'message' part of a log or to search every single field through. 

The <a href="https://github.com/travelping/lager_journald_backend"><tt>lager_journald_backend</tt></a> is capable of storing Erlang meta information in journald. These can also be used to filter logs by application or other data:

```
    Logs = ejournald:get_logs([{application, my_app}, {at_most, 5}]).
'''

This gives me the last five logs coming from the application 'my_app'. Note that meta information is logged automatically by the backend.
